if exists("g:loaded_rubyformatter")
    finish
endif
let g:loaded_rubyformatter = 1

command! -range Format call rubyformatter#Format(<range>)

let g:rules2 = [
	\[
		\['\.\k\+ { \(|.*|\) .* }', { ' { \(|.*|\) ': ' do \1\r', ';\s*': '\r', ' }': '\rend' }],
		\['\.\k\+ do \(|.*|\)\(\\n.*\)*\\nend', { ' do \(|.*|\)': ' { \1', '\\n': '; ', '|;': '|', 'end': '}' }],
	\],
	\[
		\['#{\s*\([^ ]\+\)\s*}', { '#{\s*\([^ ]\+\)\s*}': '#{\1}' }],
		\['{ \(\([^,]\+\(,\s*\)\?\)\+\) }', { '\([{,]\) ': '\1\r', ' }': '\r}'}],
		\['{\(\\n.*\)*\\n}', { '\\n': ' '}],
		\['{\s*\(\([^,]\+\(,\s*\)\?\)\+\)\s*}', {'{\s*': '{ ', '\s*}': ' }', ',\s*': ', '}],
	\],
	\[
		\['"\k\+"\s*=>\s*', { '"\(\k\+\)"\s*=>\s*': '\1: ', '\\n': '\r'}],
		\['\k\+\s*:\s*', { '\(\k\+\)\s*:\s*': '"\1" => ', '\\n': '\r'}],
	\]
\]
